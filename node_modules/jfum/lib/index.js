// Generated by CoffeeScript 1.8.0
var Form, JFUM;

Form = require('multiparty').Form;

JFUM = module.exports = function(opts) {
  if (opts == null) {
    opts = {};
  }
  this.multiparty = opts.multiparty;
  this.minFileSize = opts.minFileSize || 204800;
  this.maxFileSize = opts.maxFileSize || 5242880;
  this.acceptFileTypes = opts.acceptFileTypes || /\.(gif|jpe?g|png)$/i;
  return this;
};

JFUM.prototype.optionsHandler = function(req, res, next) {
  res.set({
    'Access-Control-Allow-Methods': 'OPTIONS, POST',
    'Access-Control-Allow-Headers': 'Content-Type'
  });
  return next();
};

JFUM.prototype.postHandler = function(req, res, next) {
  var done, _cnt;
  req.jfum = {
    files: []
  };
  _cnt = 0;
  done = function(err) {
    if (++_cnt === 1) {
      return next(err);
    }
  };
  return new Form().on('error', function(err) {
    req.jfum.error = err.message;
    return done();
  }).on('close', done).on('file', (function(_this) {
    return function(field, file) {
      file = {
        field: field,
        name: file.originalFilename,
        path: file.path,
        size: file.size,
        mime: file.headers['content-type'],
        errors: []
      };
      if (!file.name || !_this.acceptFileTypes.test(file.name)) {
        file.errors.push({
          code: 'JFUM-001',
          message: 'File type not allowed'
        });
      }
      if (_this.maxFileSize < file.size) {
        file.errors.push({
          code: 'JFUM-002',
          message: 'File size too big'
        });
      }
      if (_this.minFileSize > file.size) {
        file.errors.push({
          code: 'JFUM-003',
          message: 'File size too small'
        });
      }
      if (file.errors.length !== 0) {
        delete file.path;
      }
      return req.jfum.files.push(file);
    };
  })(this)).parse(req);
};
